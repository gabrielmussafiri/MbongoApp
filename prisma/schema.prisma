generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id          String       @id @default(uuid())
  name        String
  country     String
  contact     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subAccounts SubAccount[]
  users       User[]
}

model SubAccount {
  id                      String        @id @default(uuid())
  agentId                 String
  type                    String
  currency                String
  balance                 Float         @default(0)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  agent                   Agent         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  destinationTransactions Transaction[] @relation("DestinationTransactions")
  sourceTransactions      Transaction[] @relation("SourceTransactions")
}

model Transaction {
  id              String     @id @default(uuid())
  amount          Float
  currency        String
  sourceAccountId String?
  destAccountId   String?
  type            String
  status          String     @default("PENDING")
  description     String?
  sender          String
  proofFile       String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  destAccount     SubAccount? @relation("DestinationTransactions", fields: [destAccountId], references: [id])
  sourceAccount   SubAccount? @relation("SourceTransactions", fields: [sourceAccountId], references: [id])
  requestedBy     String?
  processedBy     String?
  validationCode  String?    @unique
  validatedAt     DateTime?
  expiresAt       DateTime?
  localAmount     Float?

  @@map("transactions")
}

enum Role {
  ADMIN
  AGENT
  USER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  agentId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agent     Agent?   @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("users")
}
